type User {  
  active: Boolean!
  username: String!
  description: String
  email: String 
  mobile: String
  playedAs: [Player!]! @relation
}

type Player {
  rank: Int!
  ranking: Ranking @relation
  challenger: User! @relation
}

type Ranking { 
  active: Boolean!
  rankingname: String!
  rankingdesc: String
  player: Player
}

type Mutation {
  createNewPlayer(ranking: String!, uid: String!, rank: Int!, challenger: String): Player! @resolver(name: "create_new_player")
  createNewRanking(active: Boolean!, rankingname : String!, rankingdesc : String, player : String!): Ranking! @resolver(name: "create_new_ranking")
  createNewUser(active: Boolean!, username : String!, password : String!, description: String, email: String, mobile: String, playedAs: [Player!]!): loginResult! @resolver(name: "create_new_user")
  loginUser(username: String!, password: String!): loginResult! @resolver(name: "login_user") 

type Query {
  allUserNames: [String!]! @resolver(name: "all_user_names")
  allPlayerUIDs: [String!]! @resolver(name: "all_player_uids")
  allPlayerRanks: [Int!]! @resolver(name: "all_player_ranks")
  allPlayerChallengerUIDs: [String!]! @resolver(name: "all_player_challenger_uids")
  allPlayers: [Player] @resolver(name: "all_players")
  allRankings: [Ranking] @resolver(name: "all_rankings")
  allUsers: [User] @resolver(name: "all_users")
  gotPlayersByRankingId (rankingid: String!): [Player] @resolver(name: "got_players_byrankingid")
}

type loginResult @embedded
{
    token
    logginUser {
      _id
      playedAs {
        _id
        ranking {
          _id
          active
          rankingname
          rankingdesc
        }
      }
    }
  }
}